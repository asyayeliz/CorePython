# %% [markdown]
# # Problem 1
# Bir YetGenli yeni aldığı bahçesinin etrafına çit çevirmek istiyor. Bahçenin etrafını çit ile çevirmek için gerekli çit uzunluğunu ve bahçenin alanını hesaplayan fonksiyonu yazınız.

# %%
# 1.Problemin Çözümünü Buraya Yazınız

def bahce_hesaplari(uzunluk, genislik):
    # Çit uzunluğunu 
    cit_uzunlugu = 2 * (uzunluk + genislik)
    
    # Alanı hesaplama 
    alan = uzunluk * genislik
    
    return cit_uzunlugu, alan


uzunluk = float(input("Bahçenin uzunluğunu giriniz (metre cinsinden): "))
genislik = float(input("Bahçenin genişliğini giriniz (metre cinsinden): "))


cit_uzunlugu, alan = bahce_hesaplari(uzunluk, genislik)

# Sonuçlar
print(f"Bahçenin etrafını çevirmek için gerekli çit uzunluğu: {cit_uzunlugu} metre")
print(f"Bahçenin alanı: {alan} metrekare")

# %% [markdown]
# # Problem 2
# Kendisine gönderilen 2 sayı arasındaki tüm asal sayıları bulan fonksiyonu yazınız.

# %%
# 2.Problemin Çözümünü Buraya Yazınız

def asal_mi(sayi):
    if sayi <= 1:
        return False
    for i in range(2, int(sayi**0.5) + 1):
        if sayi % i == 0:
            return False
    return True

def asal_sayilari_bul(baslangic, bitis):
    asal_sayilar = []
    for sayi in range(baslangic, bitis + 1):
        if asal_mi(sayi):
            asal_sayilar.append(sayi)
    return asal_sayilar


baslangic = int(input("Başlangıç sayısını giriniz: "))
bitis = int(input("Bitiş sayısını giriniz: "))


asal_sayilar = asal_sayilari_bul(baslangic, bitis)


print(f"{baslangic} ile {bitis} arasındaki asal sayılar: {asal_sayilar}")

# %% [markdown]
# # Problem 3
# YetGen liderlerinin kurdukları girişim unicorn oluyor. YetGen liderleri iş arkadaşlarının alacağı ücretlerini hesaplamak için bir fonksiyon yazdılar. Bu fonksiyonu kullanarak, YetGen liderlerinin iş arkadaşlarına verecekleri ücretleri hesaplayınız.
# 
# Ücret hesaplanması çalışma saatine bağlıdır. Bunun için kullanıcıdan çalışma saati bilgisinn alın. Sonrasında yapılacak ödemenin hesaplanacağı computePay() adlı bir fonksiyon oluşturun. Bu fonksiyonun içinde işlemler yapın. Çalışma saati 40 ve altındaysa saat başına ücret 10 TL’dir. 40 saatin üstünde çalışıldıysa saat başına ücret 15 TL sayılmaktadır.
# 
# ```
# Test etmek için 30 saat değerini giriniz,  sonuç 300 TL çıkmalı, 
# ikincil test olarak 50 değerini giriniz,  sonuç 750 TL çıkmalı.
# ```

# %%
# 3.Problemin Çözümünü Buraya Yazınız

def computePay(calisma_saati):
    
    temel_ucret = 10
    fazla_mesai_ucreti = 15
    
    
    if calisma_saati <= 40:
        toplam_ucret = calisma_saati * temel_ucret
    else:
        
        fazla_mesai_saati = calisma_saati - 40
        toplam_ucret = (40 * temel_ucret) + (fazla_mesai_saati * fazla_mesai_ucreti)
    
    return toplam_ucret

calisma_saati = float(input("Çalışma saatinizi giriniz: "))

toplam_ucret = computePay(calisma_saati)

print(f"Toplam ödenecek ücret: {toplam_ucret} TL")

# %% [markdown]
# # Problem 4
# YetGenliler zirveye gitmek için toplanıyor. Zirveye gitmek için kiraladıkları araçlar 4'er kişiliktir. Gelecek kişi sayısı için Airtable üzerinde form açılıyor. Gelecek kişi sayısını alıp dört kişilik araçlara bölüp kalan kişi sayısını döndüren bir fonksiyon yazınız.

# %%
# 4.Problemin Çözümünü Buraya Yazınız

def kalan_kisi_sayisi(gelecek_kisi_sayisi):
    
    kalan = gelecek_kisi_sayisi % 4
    return kalan


gelecek_kisi_sayisi = int(input("Gelecek kişi sayısını giriniz: "))


kalan = kalan_kisi_sayisi(gelecek_kisi_sayisi)


print(f"Dört kişilik araçlarda yer bulamayan kişi sayısı: {kalan}")

# %% [markdown]
# # Problem 5
# sayiTopla() adında bir fonksiyon yazın. sayiTopla() fonksiyonu girilen sayıları toplayarak yazdırmasını sağlayan bir fonksiyon yazınız.
# 
# Örneğin sayiTopla(1,2,3,4,5) yazdığımızda 15 çıktısını almalıyız. sayiTopla(1,2,3,4,5,6,7,8,9,10) yazdığımızda 55 çıktısını almalıyız.

# %%
# 5.Problemin Çözümünü Buraya Yazınız

def sayiTopla(*args):
    toplam = sum(args)
    print(f"Girilen sayıların toplamı: {toplam}")

    

# %% [markdown]
# # Problem 6
# 
# [("xxx",1),("xxx",2),("xxx",9),("xxx",3), ("xxx",1),("xxx",13),("xxx",26),("xxx",4)] listesi içerisinde verilen elemanların her birini tuple içindeki 2. Elemana göre sıralayınız. 
# 
# 

# %%
# 6.Problemin Çözümünü Buraya Yazınız

verilen_liste = [("xxx", 1), ("xxx", 2), ("xxx", 9), ("xxx", 3), ("xxx", 1), ("xxx", 13), ("xxx", 26), ("xxx", 4)]

siralanmis_liste = sorted(verilen_liste, key=lambda x: x[1])

print(siralanmis_liste)

# %% [markdown]
# # Problem 7
# List comprehension kullanarak 1'den 100'e kadar olan sayılardan sadece çift sayıları bir listeye atmayı yapmayı çalışın.

# %%
# 7.Problemin Çözümünü Buraya Yazınız

cift_sayilar = [sayi for sayi in range(1, 101) if sayi % 2 == 0]


print(cift_sayilar)



